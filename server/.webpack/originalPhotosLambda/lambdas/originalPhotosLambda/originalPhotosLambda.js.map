{"version":3,"file":"lambdas/originalPhotosLambda/originalPhotosLambda.js","mappings":";;;;;;;;;;;;;;AAAA;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzxhJA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACNA;;;;;AEAA;AACA;AACA;AACA","sources":["webpack://photodrop/./lambdas/originalPhotosLambda/PhotoDropLogo.png","webpack://photodrop/./db.ts","webpack://photodrop/./lambdas/originalPhotosLambda/originalPhotosLambda.ts","webpack://photodrop/./models/model.ts","webpack://photodrop/external commonjs \"aws-sdk\"","webpack://photodrop/external commonjs \"axios\"","webpack://photodrop/external commonjs \"dotenv\"","webpack://photodrop/external commonjs \"dotenv/config\"","webpack://photodrop/external commonjs \"jimp\"","webpack://photodrop/external commonjs \"pg\"","webpack://photodrop/external commonjs \"sequelize\"","webpack://photodrop/webpack/bootstrap","webpack://photodrop/webpack/runtime/define property getters","webpack://photodrop/webpack/runtime/hasOwnProperty shorthand","webpack://photodrop/webpack/runtime/make namespace object","webpack://photodrop/webpack/runtime/publicPath","webpack://photodrop/webpack/before-startup","webpack://photodrop/webpack/startup","webpack://photodrop/webpack/after-startup"],"sourcesContent":["export default __webpack_public_path__ + \"d8885004a7cbbc5c2de6177b99b30489.png\";","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst dotenv_1 = __importDefault(require(\"dotenv\"));\r\nconst pg = __importStar(require(\"pg\"));\r\nconst sequelize_1 = require(\"sequelize\");\r\ndotenv_1.default.config();\r\nconst sequelize = new sequelize_1.Sequelize(process.env.DB_NAME, process.env.DB_USERNAME, process.env.DB_PASSWORD, {\r\n    host: process.env.DB_HOST,\r\n    port: Number(process.env.DB_PORT),\r\n    dialect: 'postgres',\r\n    dialectModule: pg,\r\n    define: {\r\n        timestamps: false,\r\n    },\r\n});\r\nexports.default = sequelize;\r\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nrequire(\"dotenv/config\");\r\nconst aws_sdk_1 = __importDefault(require(\"aws-sdk\"));\r\nconst jimp_1 = __importDefault(require(\"jimp\"));\r\nconst axios_1 = __importDefault(require(\"axios\"));\r\nconst model_1 = require(\"../../models/model\");\r\nconst photoDropLogo = __importStar(require(\"./PhotoDropLogo.png\"));\r\n/*\r\n1.To import photoDropLogo index.d.ts has to be created and \"*.png\" has to be initiated and exported\r\n*/\r\n// get reference to S3 client\r\nconst s3 = new aws_sdk_1.default.S3();\r\nconst baseHandler = async (event) => {\r\n    if (!photoDropLogo) {\r\n        return;\r\n    }\r\n    const srcBucket = event.Records[0].s3.bucket.name;\r\n    // Object key may have spaces or unicode non-ASCII characters.\r\n    const srcKey = decodeURIComponent(event.Records[0].s3.object.key.replace(/\\+/g, ' '));\r\n    // for obtainig the meta data for the bucket and key\r\n    const paramsS3 = {\r\n        Bucket: srcBucket,\r\n        Key: srcKey,\r\n    };\r\n    const data = await s3.headObject(paramsS3).promise();\r\n    const metadata = (!data) ? null : data.Metadata;\r\n    if (!metadata) {\r\n        return;\r\n    }\r\n    const peopleString = metadata.people;\r\n    const peopleArray = peopleString.split(',');\r\n    const dstBucket = `${srcBucket}-resized`;\r\n    const dstBucketWM = `${srcBucket}-resized-watermark`;\r\n    const dstKey = `resized-${srcKey}`;\r\n    const dstKeyWM = `resized-watermark${dstKey}`;\r\n    // save original photo info to db\r\n    const idEnd = srcKey.indexOf('/');\r\n    const photographerId = Number(srcKey.substring(0, idEnd));\r\n    // 1/1/491e9200-155e-4a19-8935-307b98fc3841_laptop.jpg\r\n    const albumIdStart = srcKey.substring(idEnd + 1);\r\n    const albumIdEnd = albumIdStart.indexOf('/');\r\n    const albumId = Number(`${albumIdStart.substring(0, albumIdEnd)}`);\r\n    const urlPhoto = `https://${srcBucket}.s3.eu-west-1.amazonaws.com/${srcKey}`;\r\n    try {\r\n        const photo = await model_1.Photo.create({\r\n            name: srcKey, photoUrl: urlPhoto, photographerId, albumId,\r\n        });\r\n        if (photo) {\r\n            // @ts-ignore\r\n            const photoId = photo.dataValues.id;\r\n            for (let i = 0; i < peopleArray.length; i += 1) {\r\n                try {\r\n                    // eslint-disable-next-line no-await-in-loop\r\n                    const personExist = await model_1.Person.findOne({ where: { phone: peopleArray[i] } });\r\n                    if (personExist === null) {\r\n                        /* eslint-disable no-await-in-loop */\r\n                        const person = await model_1.Person.create({\r\n                            phone: peopleArray[i],\r\n                            photoId,\r\n                        });\r\n                        // @ts-ignore\r\n                        await person.addPhoto(photo);\r\n                    }\r\n                    else {\r\n                        // @ts-ignore\r\n                        await personExist.addPhoto(photo);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                }\r\n            }\r\n            console.log('Successfully uploaded');\r\n        }\r\n        else {\r\n            console.log({ message: 'Photo was not found' });\r\n        }\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n        return;\r\n    }\r\n    // Infer the image type from the file suffix.\r\n    const typeMatch = srcKey.match(/\\.([^.]*)$/);\r\n    if (!typeMatch) {\r\n        console.log('Could not determine the image type.');\r\n        return;\r\n    }\r\n    // Check that the image type is supported\r\n    const imageType = typeMatch[1].toLowerCase();\r\n    if (imageType !== 'jpg' && imageType !== 'png' && imageType !== 'jpeg') {\r\n        console.log(`Unsupported image type: ${imageType}`);\r\n        return;\r\n    }\r\n    // Download the image from the S3 source bucket.\r\n    let origimage;\r\n    try {\r\n        const params = {\r\n            Bucket: srcBucket,\r\n            Key: srcKey,\r\n        };\r\n        origimage = await s3.getObject(params).promise();\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n        return;\r\n    }\r\n    // set thumbnail width. Resize will set the height automatically to maintain aspect ratio.\r\n    const width = 400;\r\n    // Use the sharp module to resize the image and save in a buffer.\r\n    let buffer;\r\n    try {\r\n        // @ts-ignore\r\n        buffer = await jimp_1.default.read(origimage.Body).then((image) => {\r\n            const resizedImage = image\r\n                .resize(width, jimp_1.default.AUTO)\r\n                .quality(100) // set JPEG quality\r\n                .getBufferAsync(jimp_1.default.MIME_JPEG);\r\n            return resizedImage;\r\n        });\r\n        // buffer = await sharp(origimage.Body).resize(width).toBuffer();\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n        return;\r\n    }\r\n    // Upload the thumbnail image to the destination bucket\r\n    try {\r\n        const destparams = {\r\n            Bucket: dstBucket,\r\n            Key: dstKey,\r\n            Body: buffer,\r\n            ContentType: 'image',\r\n        };\r\n        const putResult = await s3.putObject(destparams).promise();\r\n        if (putResult) {\r\n            try {\r\n                // save resized photo info to db\r\n                const urlPhotoMini = `https://${dstBucket}.s3.eu-west-1.amazonaws.com/${srcKey}`;\r\n                try {\r\n                    await model_1.PhotoMini.create({\r\n                        name: srcKey, photoMiniUrl: urlPhotoMini, photographerId, albumId,\r\n                    });\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                    return;\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n                return;\r\n            }\r\n            console.log(`Successfully resized ${srcBucket}/${srcKey} and uploaded to ${dstBucket}/${dstKey}`);\r\n            console.log('METADATA IS:   ', metadata);\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n        return;\r\n    }\r\n    try {\r\n        // add watermark add upload to photodropbucket-resized-watermark\r\n        const addWaterMark = async (image) => {\r\n            /*\r\n            2.After importing the  photoDropLogo and deploying with \"serverless deploy\" command\r\n              photoDropLogo image will be present in zip package file\r\n              under the name \"d8885004a7cbbc5c2de6177b99b30489.png\"\r\n              (have no idea why this name. I was trying tix it with no success.)\r\n      \r\n              So later on we will read image using name mentioned above. The path will be\r\n              \"./d8885004a7cbbc5c2de6177b99b30489.png\" - chekc zip file manually to double check\r\n            */\r\n            const logoImage = await jimp_1.default.read('./d8885004a7cbbc5c2de6177b99b30489.png');\r\n            const resizeWidth = 400;\r\n            if (!image) {\r\n                return;\r\n            }\r\n            let imageResized = await jimp_1.default.read(image);\r\n            imageResized = imageResized.resize(resizeWidth, jimp_1.default.AUTO);\r\n            // const imageResized = await sharp(image).resize(resizeWidth).toBuffer();\r\n            const img = await jimp_1.default.read(imageResized);\r\n            img.composite(logoImage, img.bitmap.width / 2 - logoImage.bitmap.width / 2, img.bitmap.height / 2 - logoImage.bitmap.height / 2);\r\n            return img.getBufferAsync(jimp_1.default.MIME_JPEG);\r\n        };\r\n        const imageWM = await addWaterMark(origimage.Body);\r\n        const destparamsWM = {\r\n            Bucket: dstBucketWM,\r\n            Key: dstKeyWM,\r\n            Body: imageWM,\r\n            ContentType: 'image',\r\n        };\r\n        const putResultWM = await s3.putObject(destparamsWM).promise();\r\n        if (putResultWM) {\r\n            try {\r\n                // save resized photo info to db\r\n                const urlPhotoMiniWaterMark = `https://${dstBucketWM}.s3.eu-west-1.amazonaws.com/${srcKey}`;\r\n                try {\r\n                    await model_1.PhotoMiniWaterMark.create({\r\n                        name: srcKey, photoMiniWaterMarkUrl: urlPhotoMiniWaterMark, photographerId, albumId,\r\n                    });\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                    return;\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n                return;\r\n            }\r\n            console.log(`Successfully resized with matermark${srcBucket}/${srcKey} and uploaded to ${dstBucketWM}/${dstKeyWM}`);\r\n        }\r\n        // notify(in telegram) app user that photo has been uploaded\r\n        const phoneNumbers = peopleArray;\r\n        if (phoneNumbers) {\r\n            const arrLength = phoneNumbers.length;\r\n            for (let i = 0; i < arrLength; i += 1) {\r\n                const user = await model_1.AppUser.findOne({ where: { phone: phoneNumbers[i] } });\r\n                console.log({ user });\r\n                if (user) {\r\n                    const uri = encodeURI(`https://api.telegram.org/bot5620754624:AAECaxHAR6n5ITV14KjCpP-JPGCrFKcCRjY/sendMessage?chat_id=-678774504&text=PhotoDrop:${phoneNumbers[i]} your photos have dropped🔥\\n\\nCheck them out here:\\n https://userAppUrlWillBeSoonHere.com`);\r\n                    const response = await (0, axios_1.default)({\r\n                        method: 'get',\r\n                        url: uri,\r\n                    });\r\n                    console.log({ response });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n// @ts-ignore\r\nconst handler = baseHandler;\r\nmodule.exports.handler = handler;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAlbum = exports.PhotoMiniWaterMark_Person = exports.PhotoMini_Person = exports.Photo_Person = exports.SelfieMini = exports.Selfie = exports.AppUser = exports.Person = exports.PhotoMiniWaterMark = exports.PhotoMini = exports.Photo = exports.Album = exports.Photographer = void 0;\r\nconst sequelize_1 = require(\"sequelize\"); // с помощью DataTypes описываются типы поля(String, Int,  Array ect.)\r\nconst db_1 = __importDefault(require(\"../db\"));\r\n// interface PhotographerAttributes {\r\n// id: number;\r\n// login: string;\r\n// password: string;\r\n// email: string;\r\n// fullName:string\r\n// }\r\n// export class Photographer extends Model<PhotographerAttributes> {}\r\n// Photographer.init(\r\n//   {\r\n//     id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },\r\n//     login: {\r\n//       type: DataTypes.STRING,\r\n//       allowNull: false,\r\n//       unique: true,\r\n//     },\r\n//     password: { type: DataTypes.STRING, allowNull: false },\r\n//     email: { type: DataTypes.STRING },\r\n//     fullName: { type: DataTypes.STRING },\r\n//   },\r\n//   {\r\n//     sequelize,\r\n//     tableName: 'photographers',\r\n//   },\r\n// );\r\nconst Photographer = db_1.default.define('photographer', {\r\n    id: { type: sequelize_1.DataTypes.INTEGER, primaryKey: true, autoIncrement: true },\r\n    login: {\r\n        type: sequelize_1.DataTypes.STRING,\r\n        allowNull: false,\r\n        unique: true,\r\n    },\r\n    password: { type: sequelize_1.DataTypes.STRING, allowNull: false },\r\n    email: { type: sequelize_1.DataTypes.STRING },\r\n    fullName: { type: sequelize_1.DataTypes.STRING },\r\n});\r\nexports.Photographer = Photographer;\r\nconst Album = db_1.default.define('album', {\r\n    id: { type: sequelize_1.DataTypes.INTEGER, primaryKey: true, autoIncrement: true },\r\n    name: { type: sequelize_1.DataTypes.STRING, allowNull: false },\r\n    location: { type: sequelize_1.DataTypes.STRING, allowNull: false },\r\n    date: { type: sequelize_1.DataTypes.DATE, allowNull: false },\r\n});\r\nexports.Album = Album;\r\nconst Photo = db_1.default.define('photo', {\r\n    id: { type: sequelize_1.DataTypes.INTEGER, primaryKey: true, autoIncrement: true },\r\n    name: { type: sequelize_1.DataTypes.STRING },\r\n    photoUrl: { type: sequelize_1.DataTypes.STRING },\r\n});\r\nexports.Photo = Photo;\r\nconst PhotoMini = db_1.default.define('photoMini', {\r\n    id: { type: sequelize_1.DataTypes.INTEGER, primaryKey: true, autoIncrement: true },\r\n    name: { type: sequelize_1.DataTypes.STRING },\r\n    photoMiniUrl: { type: sequelize_1.DataTypes.STRING },\r\n});\r\nexports.PhotoMini = PhotoMini;\r\nconst PhotoMiniWaterMark = db_1.default.define('photoMiniWaterMark', {\r\n    id: { type: sequelize_1.DataTypes.INTEGER, primaryKey: true, autoIncrement: true },\r\n    name: { type: sequelize_1.DataTypes.STRING },\r\n    photoMiniWaterMarkUrl: { type: sequelize_1.DataTypes.STRING },\r\n});\r\nexports.PhotoMiniWaterMark = PhotoMiniWaterMark;\r\nconst Person = db_1.default.define('person', {\r\n    id: {\r\n        type: sequelize_1.DataTypes.INTEGER, primaryKey: true, autoIncrement: true,\r\n    },\r\n    phone: { type: sequelize_1.DataTypes.STRING, unique: true },\r\n    name: { type: sequelize_1.DataTypes.STRING },\r\n});\r\nexports.Person = Person;\r\nconst AppUser = db_1.default.define('appUser', {\r\n    id: { type: sequelize_1.DataTypes.INTEGER, primaryKey: true, autoIncrement: true },\r\n    name: { type: sequelize_1.DataTypes.STRING },\r\n    phone: { type: sequelize_1.DataTypes.STRING, unique: true },\r\n    email: { type: sequelize_1.DataTypes.STRING, unique: true },\r\n    textMessagesNotification: { type: sequelize_1.DataTypes.BOOLEAN },\r\n    emailNotification: { type: sequelize_1.DataTypes.BOOLEAN },\r\n    unsubscribe: { type: sequelize_1.DataTypes.BOOLEAN },\r\n});\r\nexports.AppUser = AppUser;\r\nconst Selfie = db_1.default.define('selfie', {\r\n    id: { type: sequelize_1.DataTypes.INTEGER, primaryKey: true, autoIncrement: true },\r\n    name: { type: sequelize_1.DataTypes.STRING },\r\n    selfieUrl: { type: sequelize_1.DataTypes.STRING },\r\n    active: { type: sequelize_1.DataTypes.BOOLEAN },\r\n});\r\nexports.Selfie = Selfie;\r\nconst SelfieMini = db_1.default.define('selfieMini', {\r\n    id: { type: sequelize_1.DataTypes.INTEGER, primaryKey: true, autoIncrement: true },\r\n    name: { type: sequelize_1.DataTypes.STRING },\r\n    selfieUrl: { type: sequelize_1.DataTypes.STRING },\r\n    active: { type: sequelize_1.DataTypes.BOOLEAN },\r\n});\r\nexports.SelfieMini = SelfieMini;\r\nconst UserAlbum = db_1.default.define('userAlbum', {\r\n    id: { type: sequelize_1.DataTypes.INTEGER, primaryKey: true, autoIncrement: true },\r\n    userId: { type: sequelize_1.DataTypes.INTEGER },\r\n    userName: { type: sequelize_1.DataTypes.STRING },\r\n    albumId: { type: sequelize_1.DataTypes.INTEGER },\r\n    isPaid: { type: sequelize_1.DataTypes.BOOLEAN },\r\n});\r\nexports.UserAlbum = UserAlbum;\r\nconst Photo_Person = db_1.default.define('Photo_Person', {\r\n    photoId: { type: sequelize_1.DataTypes.INTEGER },\r\n    personId: { type: sequelize_1.DataTypes.INTEGER },\r\n});\r\nexports.Photo_Person = Photo_Person;\r\nconst PhotoMini_Person = db_1.default.define('PhotoMini_Person', {\r\n    photoMiniId: { type: sequelize_1.DataTypes.INTEGER },\r\n    personId: { type: sequelize_1.DataTypes.INTEGER },\r\n});\r\nexports.PhotoMini_Person = PhotoMini_Person;\r\nconst PhotoMiniWaterMark_Person = db_1.default.define('PhotoMiniWaterMark_Person', {\r\n    photoMiniWaterMarkId: { type: sequelize_1.DataTypes.INTEGER },\r\n    personId: { type: sequelize_1.DataTypes.INTEGER },\r\n});\r\nexports.PhotoMiniWaterMark_Person = PhotoMiniWaterMark_Person;\r\nPhotographer.hasMany(Album);\r\nAlbum.belongsTo(Photographer);\r\nPhotographer.hasMany(Photo);\r\nPhoto.belongsTo(Photographer);\r\nPhotographer.hasMany(PhotoMini);\r\nPhotoMini.belongsTo(Photographer);\r\nPhotographer.hasMany(PhotoMiniWaterMark);\r\nPhotoMiniWaterMark.belongsTo(Photographer);\r\nAlbum.hasMany(Photo);\r\nPhoto.belongsTo(Album);\r\nAlbum.hasMany(PhotoMini);\r\nPhotoMini.belongsTo(Album);\r\nAlbum.hasMany(PhotoMiniWaterMark);\r\nPhotoMiniWaterMark.belongsTo(Album);\r\nPhoto.belongsToMany(Person, { through: 'Photo_Person' });\r\nPerson.belongsToMany(Photo, { through: 'Photo_Person' });\r\nAppUser.hasMany(Selfie);\r\nSelfie.belongsTo(AppUser);\r\nAppUser.hasMany(SelfieMini);\r\nSelfieMini.belongsTo(AppUser);\r\n","module.exports = require(\"aws-sdk\");","module.exports = require(\"axios\");","module.exports = require(\"dotenv\");","module.exports = require(\"dotenv/config\");","module.exports = require(\"jimp\");","module.exports = require(\"pg\");","module.exports = require(\"sequelize\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"\";","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./lambdas/originalPhotosLambda/originalPhotosLambda.ts\");\n",""],"names":[],"sourceRoot":""}